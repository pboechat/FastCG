name: CI Pipeline

on:
  push:
    branches: ['*']
  pull_request:
    branches: ['*']

jobs:
  changes:
    runs-on: ubuntu-22.04
    outputs:
      src: ${{ steps.filter.outputs.src }}
    steps:
      - uses: actions/checkout@v4
      - id: filter
        uses: dorny/paths-filter@v3
        with:
          filters: |
            src:
              - 'FastCG/**'
              - 'examples/**'
              - 'cmake/**'
              - 'CMakeLists.txt'
              - 'CMakePresets.json'
              - '**/*.c'
              - '**/*.cc'
              - '**/*.cpp'
              - '**/*.cxx'
              - '**/*.h'
              - '**/*.hh'
              - '**/*.hpp'
              - '.clang-format'

  format:
    runs-on: ubuntu-22.04
    needs: changes
    if: needs.changes.outputs.src == 'true'

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install
        run: |
          sudo apt-get update
          sudo apt-get install -y clang-format-15
          sudo update-alternatives --install /usr/bin/clang-format clang-format /usr/bin/clang-format-15 100
          sudo update-alternatives --set clang-format /usr/bin/clang-format-15

      - name: Format
        run: |
          chmod +x ./scripts/format_sources.sh || true
          ./scripts/format_sources.sh --check

  build:
    runs-on: ubuntu-22.04
    needs: [changes, format]
    if: needs.changes.outputs.src == 'true'

    strategy:
      matrix:
        platform: ['linux-gcc', 'linux-clang', 'android']
        build_type: ['debug', 'release']
        graphics_system: ['opengl', 'vulkan']

    steps:
      - name: Setup
        run: |
          if [ -z "${{ github.head_ref }}" ]; then
            echo "ref=${{ github.ref }}" >> $GITHUB_ENV
          else
            echo "ref=${{ github.head_ref }}" >> $GITHUB_ENV
          fi

      - name: Checkout code
        uses: actions/checkout@v3
        with:
          ref: ${{ env.ref }}

      - name: Install common dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y ninja-build glslang-tools libx11-dev libxext-dev libxrender-dev libgl1-mesa-dev libglu1-mesa-dev libvulkan-dev libspirv-cross-c-shared-dev
          wget -q https://github.com/Kitware/CMake/releases/download/v3.29.0/cmake-3.29.0-linux-x86_64.sh
          chmod +x cmake-3.29.0-linux-x86_64.sh
          mkdir -p "$HOME/cmake-3.29.0"
          ./cmake-3.29.0-linux-x86_64.sh --skip-license --prefix="$HOME/cmake-3.29.0"
          echo "$HOME/cmake-3.29.0/bin" >> "$GITHUB_PATH"
          wget https://github.com/KhronosGroup/KTX-Software/releases/download/v4.3.2/KTX-Software-4.3.2-Linux-x86_64.deb
          sudo dpkg -i ./KTX-Software-4.3.2-Linux-x86_64.deb

      - name: Install platform dependencies
        if: matrix.platform == 'linux-gcc'
        run: |
          sudo apt-get update
          sudo apt-get install -y gcc-12 g++-12
          sudo update-alternatives --install /usr/bin/gcc gcc /usr/bin/gcc-12 100
          sudo update-alternatives --install /usr/bin/g++ g++ /usr/bin/g++-12 12
          sudo update-alternatives --set gcc /usr/bin/gcc-12
          sudo update-alternatives --set g++ /usr/bin/g++-12

      - name: Install platform dependencies
        if: matrix.platform == 'linux-clang'
        run: |
          sudo apt-get update
          sudo apt-get install -y clang-15
          sudo update-alternatives --install /usr/bin/clang clang /usr/bin/clang-15 100
          sudo update-alternatives --install /usr/bin/clang++ clang++ /usr/bin/clang++-15 100
          sudo update-alternatives --set clang /usr/bin/clang-15
          sudo update-alternatives --set clang++ /usr/bin/clang++-15

      - name: Install platform dependencies
        if: matrix.platform == 'android'
        run: |
          sudo apt-get update
          sudo apt-get install -y openjdk-11-jdk wget unzip
          wget https://dl.google.com/android/repository/commandlinetools-linux-6609375_latest.zip -O commandlinetools.zip
          mkdir -p ~/android-sdk
          unzip commandlinetools.zip -d ~/android-sdk/cmdline-tools
          export ANDROID_HOME=$HOME/android-sdk
          export NDKROOT=$ANDROID_HOME/ndk/26.1.10909125
          export PATH=$ANDROID_HOME/cmdline-tools/tools/bin:$PATH
          export PATH=$ANDROID_HOME/platform-tools:$PATH
          yes | sdkmanager --licenses
          sdkmanager "platform-tools" "platforms;android-33" "ndk;26.1.10909125" "build-tools;34.0.0"
          echo "NDKROOT=$ANDROID_HOME/ndk/26.1.10909125" >> $GITHUB_ENV
          echo "$ANDROID_HOME/cmdline-tools/tools/bin" >> $GITHUB_PATH
          echo "$ANDROID_HOME/platform-tools" >> $GITHUB_PATH

      - name: Build
        run: |
          cmake --preset ${{ matrix.platform }}-${{ matrix.graphics_system }}-${{ matrix.build_type }}
          cmake --build build-${{ matrix.platform }}-${{ matrix.graphics_system }}-${{ matrix.build_type }}

