name: CI Pipeline

on:
  push:
    branches:
      - '*'
  pull_request:
    branches:
      - '*'

jobs:
  format:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v3
      with:
        ref: ${{ github.head_ref }}

    - name: Install clang-format
      run: | 
        sudo apt-get install -y clang-format-15
        sudo update-alternatives --install /usr/bin/clang-format clang-format /usr/bin/clang-format-15 100
        sudo update-alternatives --set clang-format /usr/bin/clang-format-15

    - name: Run clang-format
      run: |
        chmod +x ./format_sources.sh
        ./format_sources.sh

    - name: Check for code format changes
      run: |
        git config --global user.name 'github-actions'
        git config --global user.email 'github-actions@github.com'
        git add .
        if ! git diff --cached --exit-code; then
          git commit -m "Applied format changes."
          git push origin HEAD:${{ github.head_ref }}
          echo "Applied format changes."
        else
          echo "No formatting changes."
        fi

  build:
    runs-on: ubuntu-latest
    needs: format

    strategy:
      matrix:
        compiler: ['gcc', 'clang']
        build_type: ['Debug', 'Release']
        graphics_system: ['OpenGL', 'Vulkan']

    steps:
    - name: Checkout code
      uses: actions/checkout@v3
      with:
        ref: ${{ github.head_ref }}

    - name: Install gcc
      if: matrix.compiler == 'gcc'
      run: | 
        sudo apt-get install -y gcc-12 g++-12
        sudo update-alternatives --install /usr/bin/gcc gcc /usr/bin/gcc-12 100
        sudo update-alternatives --set gcc /usr/bin/gcc-12
        echo "CC=gcc" >> $GITHUB_ENV
        echo "CXX=g++" >> $GITHUB_ENV

    - name: Install clang
      if: matrix.compiler == 'clang'
      run: | 
        sudo apt-get install -y clang-15
        sudo update-alternatives --install /usr/bin/clang clang /usr/bin/clang-15 100
        sudo update-alternatives --set clang /usr/bin/clang-15
        echo "CC=clang" >> $GITHUB_ENV
        echo "CXX=clang++" >> $GITHUB_ENV

    - name: Install build tools
      run: |
        sudo apt-get install -y cmake ninja-build

    - name: Install dependencies
      run: |
        sudo apt-get install -y glslang-tools libx11-dev libgl1-mesa-dev libglu1-mesa-dev libxrender-dev libvulkan-dev libspirv-cross-c-shared-dev
        wget https://github.com/KhronosGroup/KTX-Software/releases/download/v4.3.2/KTX-Software-4.3.2-Linux-x86_64.deb
        sudo dpkg -i ./KTX-Software-4.3.2-Linux-arm64.deb

    - name: Build
      run: |
        cmake -B build -S . -DFASTCG_GRAPHICS_SYSTEM=${{ matrix.graphics_system }} -DCMAKE_BUILD_TYPE=${{ matrix.build_type }}
        cmake --build build
